import os
from typing import Dict, List
from pathlib import Path

import yaml

from utils import normalized_version
from structures import Vulnerability


ADVISORY_DIR = Path(os.path.abspath(__file__)).parent.parent.joinpath("advisories")
vulnerability_index: Dict[str, Dict[str, List[Vulnerability]]] = {}


def build_index():
    is_valid_advisory_file = lambda file_name: file_name.startswith("CVE-")
    for file in filter(is_valid_advisory_file, os.listdir(ADVISORY_DIR)):
        file_path = os.path.join(ADVISORY_DIR, file)
        load_index_with_file(file_path)


def update_index_with_advisory(advisory):
    for vulnerable_component in advisory["vulnerable_components"]:
        component_name = vulnerable_component["component_name"]
        if component_name not in vulnerability_index:
            vulnerability_index[component_name] = {}
        for vulnerable_version in vulnerable_component["vulnerable_versions"]:
            vulnerable_version = normalized_version(vulnerable_version)
            if vulnerable_version not in vulnerability_index[component_name]:
                vulnerability_index[component_name][vulnerable_version] = []
            vulnerability_index[component_name][vulnerable_version].append(
                Vulnerability(
                    cve_id=advisory["vulnerability_id"],
                    link=find_announce_link(advisory["references"]),
                )
            )


def load_index_with_file(file_path):
    with open(file_path) as f:
        advisory = yaml.safe_load(f)
        update_index_with_advisory(advisory)


def find_announce_link(links):
    for link in links:
        if "groups.google.com" in link:
            return link


build_index()
